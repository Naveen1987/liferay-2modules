/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package istruzioni_per_la_compilazioneservice.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import istruzioni_per_la_compilazioneservice.model.istruzioni_per_la_compilazione;
import istruzioni_per_la_compilazioneservice.model.istruzioni_per_la_compilazioneModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the istruzioni_per_la_compilazione service. Represents a row in the &quot;istruzioni_per_la_compilazione&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link istruzioni_per_la_compilazioneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link istruzioni_per_la_compilazioneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see istruzioni_per_la_compilazioneImpl
 * @see istruzioni_per_la_compilazione
 * @see istruzioni_per_la_compilazioneModel
 * @generated
 */
@ProviderType
public class istruzioni_per_la_compilazioneModelImpl extends BaseModelImpl<istruzioni_per_la_compilazione>
	implements istruzioni_per_la_compilazioneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a istruzioni_per_la_compilazione model instance should use the {@link istruzioni_per_la_compilazione} interface instead.
	 */
	public static final String TABLE_NAME = "istruzioni_per_la_compilazione";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Istruzioni_per_id", Types.BIGINT },
			{ "purpose", Types.VARCHAR },
			{ "MainTitle", Types.VARCHAR },
			{ "Tilte", Types.VARCHAR },
			{ "SubTitle", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("Istruzioni_per_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("purpose", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MainTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Tilte", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SubTitle", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table istruzioni_per_la_compilazione (Istruzioni_per_id LONG not null primary key,purpose VARCHAR(75) null,MainTitle VARCHAR(75) null,Tilte VARCHAR(75) null,SubTitle VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table istruzioni_per_la_compilazione";
	public static final String ORDER_BY_JPQL = " ORDER BY istruzioni_per_la_compilazione.Istruzioni_per_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY istruzioni_per_la_compilazione.Istruzioni_per_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(istruzioni_per_la_compilazioneservice.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.istruzioni_per_la_compilazioneservice.model.istruzioni_per_la_compilazione"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(istruzioni_per_la_compilazioneservice.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.istruzioni_per_la_compilazioneservice.model.istruzioni_per_la_compilazione"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(istruzioni_per_la_compilazioneservice.service.util.ServiceProps.get(
				"lock.expiration.time.istruzioni_per_la_compilazioneservice.model.istruzioni_per_la_compilazione"));

	public istruzioni_per_la_compilazioneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Istruzioni_per_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIstruzioni_per_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Istruzioni_per_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return istruzioni_per_la_compilazione.class;
	}

	@Override
	public String getModelClassName() {
		return istruzioni_per_la_compilazione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Istruzioni_per_id", getIstruzioni_per_id());
		attributes.put("purpose", getPurpose());
		attributes.put("MainTitle", getMainTitle());
		attributes.put("Tilte", getTilte());
		attributes.put("SubTitle", getSubTitle());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long Istruzioni_per_id = (Long)attributes.get("Istruzioni_per_id");

		if (Istruzioni_per_id != null) {
			setIstruzioni_per_id(Istruzioni_per_id);
		}

		String purpose = (String)attributes.get("purpose");

		if (purpose != null) {
			setPurpose(purpose);
		}

		String MainTitle = (String)attributes.get("MainTitle");

		if (MainTitle != null) {
			setMainTitle(MainTitle);
		}

		String Tilte = (String)attributes.get("Tilte");

		if (Tilte != null) {
			setTilte(Tilte);
		}

		String SubTitle = (String)attributes.get("SubTitle");

		if (SubTitle != null) {
			setSubTitle(SubTitle);
		}
	}

	@Override
	public long getIstruzioni_per_id() {
		return _Istruzioni_per_id;
	}

	@Override
	public void setIstruzioni_per_id(long Istruzioni_per_id) {
		_Istruzioni_per_id = Istruzioni_per_id;
	}

	@Override
	public String getPurpose() {
		if (_purpose == null) {
			return StringPool.BLANK;
		}
		else {
			return _purpose;
		}
	}

	@Override
	public void setPurpose(String purpose) {
		_purpose = purpose;
	}

	@Override
	public String getMainTitle() {
		if (_MainTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _MainTitle;
		}
	}

	@Override
	public void setMainTitle(String MainTitle) {
		_MainTitle = MainTitle;
	}

	@Override
	public String getTilte() {
		if (_Tilte == null) {
			return StringPool.BLANK;
		}
		else {
			return _Tilte;
		}
	}

	@Override
	public void setTilte(String Tilte) {
		_Tilte = Tilte;
	}

	@Override
	public String getSubTitle() {
		if (_SubTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _SubTitle;
		}
	}

	@Override
	public void setSubTitle(String SubTitle) {
		_SubTitle = SubTitle;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			istruzioni_per_la_compilazione.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public istruzioni_per_la_compilazione toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (istruzioni_per_la_compilazione)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		istruzioni_per_la_compilazioneImpl istruzioni_per_la_compilazioneImpl = new istruzioni_per_la_compilazioneImpl();

		istruzioni_per_la_compilazioneImpl.setIstruzioni_per_id(getIstruzioni_per_id());
		istruzioni_per_la_compilazioneImpl.setPurpose(getPurpose());
		istruzioni_per_la_compilazioneImpl.setMainTitle(getMainTitle());
		istruzioni_per_la_compilazioneImpl.setTilte(getTilte());
		istruzioni_per_la_compilazioneImpl.setSubTitle(getSubTitle());

		istruzioni_per_la_compilazioneImpl.resetOriginalValues();

		return istruzioni_per_la_compilazioneImpl;
	}

	@Override
	public int compareTo(
		istruzioni_per_la_compilazione istruzioni_per_la_compilazione) {
		long primaryKey = istruzioni_per_la_compilazione.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof istruzioni_per_la_compilazione)) {
			return false;
		}

		istruzioni_per_la_compilazione istruzioni_per_la_compilazione = (istruzioni_per_la_compilazione)obj;

		long primaryKey = istruzioni_per_la_compilazione.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<istruzioni_per_la_compilazione> toCacheModel() {
		istruzioni_per_la_compilazioneCacheModel istruzioni_per_la_compilazioneCacheModel =
			new istruzioni_per_la_compilazioneCacheModel();

		istruzioni_per_la_compilazioneCacheModel.Istruzioni_per_id = getIstruzioni_per_id();

		istruzioni_per_la_compilazioneCacheModel.purpose = getPurpose();

		String purpose = istruzioni_per_la_compilazioneCacheModel.purpose;

		if ((purpose != null) && (purpose.length() == 0)) {
			istruzioni_per_la_compilazioneCacheModel.purpose = null;
		}

		istruzioni_per_la_compilazioneCacheModel.MainTitle = getMainTitle();

		String MainTitle = istruzioni_per_la_compilazioneCacheModel.MainTitle;

		if ((MainTitle != null) && (MainTitle.length() == 0)) {
			istruzioni_per_la_compilazioneCacheModel.MainTitle = null;
		}

		istruzioni_per_la_compilazioneCacheModel.Tilte = getTilte();

		String Tilte = istruzioni_per_la_compilazioneCacheModel.Tilte;

		if ((Tilte != null) && (Tilte.length() == 0)) {
			istruzioni_per_la_compilazioneCacheModel.Tilte = null;
		}

		istruzioni_per_la_compilazioneCacheModel.SubTitle = getSubTitle();

		String SubTitle = istruzioni_per_la_compilazioneCacheModel.SubTitle;

		if ((SubTitle != null) && (SubTitle.length() == 0)) {
			istruzioni_per_la_compilazioneCacheModel.SubTitle = null;
		}

		return istruzioni_per_la_compilazioneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{Istruzioni_per_id=");
		sb.append(getIstruzioni_per_id());
		sb.append(", purpose=");
		sb.append(getPurpose());
		sb.append(", MainTitle=");
		sb.append(getMainTitle());
		sb.append(", Tilte=");
		sb.append(getTilte());
		sb.append(", SubTitle=");
		sb.append(getSubTitle());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append(
			"istruzioni_per_la_compilazioneservice.model.istruzioni_per_la_compilazione");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Istruzioni_per_id</column-name><column-value><![CDATA[");
		sb.append(getIstruzioni_per_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purpose</column-name><column-value><![CDATA[");
		sb.append(getPurpose());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MainTitle</column-name><column-value><![CDATA[");
		sb.append(getMainTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Tilte</column-name><column-value><![CDATA[");
		sb.append(getTilte());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SubTitle</column-name><column-value><![CDATA[");
		sb.append(getSubTitle());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = istruzioni_per_la_compilazione.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			istruzioni_per_la_compilazione.class
		};
	private long _Istruzioni_per_id;
	private String _purpose;
	private String _MainTitle;
	private String _Tilte;
	private String _SubTitle;
	private istruzioni_per_la_compilazione _escapedModel;
}