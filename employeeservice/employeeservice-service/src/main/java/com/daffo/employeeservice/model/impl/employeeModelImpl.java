/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.daffo.employeeservice.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.daffo.employeeservice.model.employee;
import com.daffo.employeeservice.model.employeeModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the employee service. Represents a row in the &quot;employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link employeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link employeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see employeeImpl
 * @see employee
 * @see employeeModel
 * @generated
 */
@ProviderType
public class employeeModelImpl extends BaseModelImpl<employee>
	implements employeeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link employee} interface instead.
	 */
	public static final String TABLE_NAME = "employee";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eid", Types.INTEGER },
			{ "ename", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("eid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ename", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table employee (eid INTEGER not null primary key,ename VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table employee";
	public static final String ORDER_BY_JPQL = " ORDER BY employee.eid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY employee.eid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.daffo.employeeservice.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.daffo.employeeservice.model.employee"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.daffo.employeeservice.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.daffo.employeeservice.model.employee"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.daffo.employeeservice.service.util.ServiceProps.get(
				"lock.expiration.time.com.daffo.employeeservice.model.employee"));

	public employeeModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _eid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setEid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return employee.class;
	}

	@Override
	public String getModelClassName() {
		return employee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eid", getEid());
		attributes.put("ename", getEname());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer eid = (Integer)attributes.get("eid");

		if (eid != null) {
			setEid(eid);
		}

		String ename = (String)attributes.get("ename");

		if (ename != null) {
			setEname(ename);
		}
	}

	@Override
	public int getEid() {
		return _eid;
	}

	@Override
	public void setEid(int eid) {
		_eid = eid;
	}

	@Override
	public String getEname() {
		if (_ename == null) {
			return StringPool.BLANK;
		}
		else {
			return _ename;
		}
	}

	@Override
	public void setEname(String ename) {
		_ename = ename;
	}

	@Override
	public employee toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (employee)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		employeeImpl employeeImpl = new employeeImpl();

		employeeImpl.setEid(getEid());
		employeeImpl.setEname(getEname());

		employeeImpl.resetOriginalValues();

		return employeeImpl;
	}

	@Override
	public int compareTo(employee employee) {
		int primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof employee)) {
			return false;
		}

		employee employee = (employee)obj;

		int primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<employee> toCacheModel() {
		employeeCacheModel employeeCacheModel = new employeeCacheModel();

		employeeCacheModel.eid = getEid();

		employeeCacheModel.ename = getEname();

		String ename = employeeCacheModel.ename;

		if ((ename != null) && (ename.length() == 0)) {
			employeeCacheModel.ename = null;
		}

		return employeeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{eid=");
		sb.append(getEid());
		sb.append(", ename=");
		sb.append(getEname());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.daffo.employeeservice.model.employee");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eid</column-name><column-value><![CDATA[");
		sb.append(getEid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ename</column-name><column-value><![CDATA[");
		sb.append(getEname());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = employee.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			employee.class
		};
	private int _eid;
	private String _ename;
	private employee _escapedModel;
}