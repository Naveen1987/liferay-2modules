/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.daffo.wiki_node_tableservice.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.daffo.wiki_node_tableservice.model.wiki_comment_table;
import com.daffo.wiki_node_tableservice.model.wiki_comment_tableModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the wiki_comment_table service. Represents a row in the &quot;wiki_comment_table&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link wiki_comment_tableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link wiki_comment_tableImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see wiki_comment_tableImpl
 * @see wiki_comment_table
 * @see wiki_comment_tableModel
 * @generated
 */
@ProviderType
public class wiki_comment_tableModelImpl extends BaseModelImpl<wiki_comment_table>
	implements wiki_comment_tableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a wiki_comment_table model instance should use the {@link wiki_comment_table} interface instead.
	 */
	public static final String TABLE_NAME = "wiki_comment_table";
	public static final Object[][] TABLE_COLUMNS = {
			{ "comment_ID", Types.BIGINT },
			{ "Comment_data", Types.VARCHAR },
			{ "Comment_User", Types.VARCHAR },
			{ "Comment_Date", Types.VARCHAR },
			{ "PageID", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("comment_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Comment_data", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Comment_User", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Comment_Date", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PageID", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table wiki_comment_table (comment_ID LONG not null primary key,Comment_data VARCHAR(75) null,Comment_User VARCHAR(75) null,Comment_Date VARCHAR(75) null,PageID LONG)";
	public static final String TABLE_SQL_DROP = "drop table wiki_comment_table";
	public static final String ORDER_BY_JPQL = " ORDER BY wiki_comment_table.comment_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY wiki_comment_table.comment_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.daffo.wiki_node_tableservice.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.daffo.wiki_node_tableservice.model.wiki_comment_table"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.daffo.wiki_node_tableservice.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.daffo.wiki_node_tableservice.model.wiki_comment_table"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.daffo.wiki_node_tableservice.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.daffo.wiki_node_tableservice.model.wiki_comment_table"),
			true);
	public static final long PAGEID_COLUMN_BITMASK = 1L;
	public static final long COMMENT_ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.daffo.wiki_node_tableservice.service.util.ServiceProps.get(
				"lock.expiration.time.com.daffo.wiki_node_tableservice.model.wiki_comment_table"));

	public wiki_comment_tableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _comment_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setComment_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _comment_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return wiki_comment_table.class;
	}

	@Override
	public String getModelClassName() {
		return wiki_comment_table.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("comment_ID", getComment_ID());
		attributes.put("Comment_data", getComment_data());
		attributes.put("Comment_User", getComment_User());
		attributes.put("Comment_Date", getComment_Date());
		attributes.put("PageID", getPageID());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long comment_ID = (Long)attributes.get("comment_ID");

		if (comment_ID != null) {
			setComment_ID(comment_ID);
		}

		String Comment_data = (String)attributes.get("Comment_data");

		if (Comment_data != null) {
			setComment_data(Comment_data);
		}

		String Comment_User = (String)attributes.get("Comment_User");

		if (Comment_User != null) {
			setComment_User(Comment_User);
		}

		String Comment_Date = (String)attributes.get("Comment_Date");

		if (Comment_Date != null) {
			setComment_Date(Comment_Date);
		}

		Long PageID = (Long)attributes.get("PageID");

		if (PageID != null) {
			setPageID(PageID);
		}
	}

	@Override
	public long getComment_ID() {
		return _comment_ID;
	}

	@Override
	public void setComment_ID(long comment_ID) {
		_comment_ID = comment_ID;
	}

	@Override
	public String getComment_data() {
		if (_Comment_data == null) {
			return StringPool.BLANK;
		}
		else {
			return _Comment_data;
		}
	}

	@Override
	public void setComment_data(String Comment_data) {
		_Comment_data = Comment_data;
	}

	@Override
	public String getComment_User() {
		if (_Comment_User == null) {
			return StringPool.BLANK;
		}
		else {
			return _Comment_User;
		}
	}

	@Override
	public void setComment_User(String Comment_User) {
		_Comment_User = Comment_User;
	}

	@Override
	public String getComment_Date() {
		if (_Comment_Date == null) {
			return StringPool.BLANK;
		}
		else {
			return _Comment_Date;
		}
	}

	@Override
	public void setComment_Date(String Comment_Date) {
		_Comment_Date = Comment_Date;
	}

	@Override
	public long getPageID() {
		return _PageID;
	}

	@Override
	public void setPageID(long PageID) {
		_columnBitmask |= PAGEID_COLUMN_BITMASK;

		if (!_setOriginalPageID) {
			_setOriginalPageID = true;

			_originalPageID = _PageID;
		}

		_PageID = PageID;
	}

	public long getOriginalPageID() {
		return _originalPageID;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			wiki_comment_table.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public wiki_comment_table toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (wiki_comment_table)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		wiki_comment_tableImpl wiki_comment_tableImpl = new wiki_comment_tableImpl();

		wiki_comment_tableImpl.setComment_ID(getComment_ID());
		wiki_comment_tableImpl.setComment_data(getComment_data());
		wiki_comment_tableImpl.setComment_User(getComment_User());
		wiki_comment_tableImpl.setComment_Date(getComment_Date());
		wiki_comment_tableImpl.setPageID(getPageID());

		wiki_comment_tableImpl.resetOriginalValues();

		return wiki_comment_tableImpl;
	}

	@Override
	public int compareTo(wiki_comment_table wiki_comment_table) {
		long primaryKey = wiki_comment_table.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof wiki_comment_table)) {
			return false;
		}

		wiki_comment_table wiki_comment_table = (wiki_comment_table)obj;

		long primaryKey = wiki_comment_table.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		wiki_comment_tableModelImpl wiki_comment_tableModelImpl = this;

		wiki_comment_tableModelImpl._originalPageID = wiki_comment_tableModelImpl._PageID;

		wiki_comment_tableModelImpl._setOriginalPageID = false;

		wiki_comment_tableModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<wiki_comment_table> toCacheModel() {
		wiki_comment_tableCacheModel wiki_comment_tableCacheModel = new wiki_comment_tableCacheModel();

		wiki_comment_tableCacheModel.comment_ID = getComment_ID();

		wiki_comment_tableCacheModel.Comment_data = getComment_data();

		String Comment_data = wiki_comment_tableCacheModel.Comment_data;

		if ((Comment_data != null) && (Comment_data.length() == 0)) {
			wiki_comment_tableCacheModel.Comment_data = null;
		}

		wiki_comment_tableCacheModel.Comment_User = getComment_User();

		String Comment_User = wiki_comment_tableCacheModel.Comment_User;

		if ((Comment_User != null) && (Comment_User.length() == 0)) {
			wiki_comment_tableCacheModel.Comment_User = null;
		}

		wiki_comment_tableCacheModel.Comment_Date = getComment_Date();

		String Comment_Date = wiki_comment_tableCacheModel.Comment_Date;

		if ((Comment_Date != null) && (Comment_Date.length() == 0)) {
			wiki_comment_tableCacheModel.Comment_Date = null;
		}

		wiki_comment_tableCacheModel.PageID = getPageID();

		return wiki_comment_tableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{comment_ID=");
		sb.append(getComment_ID());
		sb.append(", Comment_data=");
		sb.append(getComment_data());
		sb.append(", Comment_User=");
		sb.append(getComment_User());
		sb.append(", Comment_Date=");
		sb.append(getComment_Date());
		sb.append(", PageID=");
		sb.append(getPageID());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.daffo.wiki_node_tableservice.model.wiki_comment_table");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>comment_ID</column-name><column-value><![CDATA[");
		sb.append(getComment_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Comment_data</column-name><column-value><![CDATA[");
		sb.append(getComment_data());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Comment_User</column-name><column-value><![CDATA[");
		sb.append(getComment_User());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Comment_Date</column-name><column-value><![CDATA[");
		sb.append(getComment_Date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PageID</column-name><column-value><![CDATA[");
		sb.append(getPageID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = wiki_comment_table.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			wiki_comment_table.class
		};
	private long _comment_ID;
	private String _Comment_data;
	private String _Comment_User;
	private String _Comment_Date;
	private long _PageID;
	private long _originalPageID;
	private boolean _setOriginalPageID;
	private long _columnBitmask;
	private wiki_comment_table _escapedModel;
}